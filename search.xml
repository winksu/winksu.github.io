<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux——软件测试中的Linux</title>
      <link href="/2023/09/12/linux-ruan-jian-ce-shi-zhong-de-linux/"/>
      <url>/2023/09/12/linux-ruan-jian-ce-shi-zhong-de-linux/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux是一种开源的操作系统内核，最初由Linus Torvalds于1991年创建。它被广泛用于各种设备和计算机上，包括个人电脑、服务器、移动设备等。Linux内核负责管理硬件资源，如处理器、内存和设备驱动程序。此外，许多人在Linux内核的基础上构建了各种不同的Linux发行版（例如Ubuntu、Fedora、Debian等），这些发行版通常包含了额外的软件、工具和图形界面，使其成为完整的操作系统。由于其开源性质，Linux能够由社区共同维护和改进，具有高度的自定义性和稳定性。</p><h2 id="Linux命令的基本格式及常见形式"><a href="#Linux命令的基本格式及常见形式" class="headerlink" title="Linux命令的基本格式及常见形式"></a>Linux命令的基本格式及常见形式</h2><p>Linux命令的基本格式通常如下：</p><pre class="line-numbers language-none"><code class="language-none">command [options] [arguments]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>command</code>: 要执行的命令的名称。</li><li><code>options</code>: 命令的选项，通常以短横线（-）或双短横线（–）开头。</li><li><code>arguments</code>: 命令的参数，是命令操作的对象。</li></ul><p>常见的命令形式包括：</p><ol><li><strong>无选项和参数：</strong> 最简单的形式，只输入命令名称即可，例如：<code>ls</code>。</li><li><strong>带选项，无参数：</strong> 使用命令选项，但没有其他参数，例如：<code>ls -l</code>。</li><li><strong>带选项和参数：</strong> 同时使用命令选项和参数，例如：<code>cp -r source_directory destination_directory</code>。</li><li><strong>带长选项：</strong> 有些命令支持长选项，使用双短横线，例如：<code>ls --color=auto</code>。</li><li><strong>多个选项：</strong> 可以在同一命令中组合多个选项，例如：<code>ls -l -a</code>，或者简写为 <code>ls -la</code>。</li><li><strong>位置参数：</strong> 有些命令可能需要指定位置参数，例如：<code>ping google.com</code>。</li></ol><p>此外，还有一些特殊形式的命令，如管道（<code>|</code>）、重定向（<code>&gt;</code>、<code>&gt;&gt;</code>）和后台运行（<code>&amp;</code>）等，用于将多个命令连接起来或控制命令的输入和输出。</p><p>需要注意的是，每个命令的选项和参数都可能因命令而异，因此在使用命令前最好查阅相关文档或使用命令的帮助选项（通常是 <code>-h</code> 或 <code>--help</code>）来了解正确的用法和选项。</p><h2 id="为什么软件测试会用到Linux"><a href="#为什么软件测试会用到Linux" class="headerlink" title="为什么软件测试会用到Linux"></a>为什么软件测试会用到Linux</h2><p>软件测试中使用Linux有以下几个原因：</p><ol><li><p><strong>多样性的测试环境：</strong> Linux操作系统有多个发行版，每个发行版又有不同的配置和特性。在Linux上进行测试可以确保软件在各种环境下都能正常工作，从而提高软件的稳定性和兼容性。</p></li><li><p><strong>服务器端应用测试：</strong> 许多服务器端应用和服务都在Linux上运行，如Web服务器（如Apache、Nginx）、数据库服务器（如MySQL、PostgreSQL）等。为了确保这些应用在Linux环境下正常运行，需要进行针对性的测试。</p></li><li><p><strong>开源软件生态系统：</strong> Linux是开源软件的中心，许多开源项目都在Linux上进行开发和测试。如果你的软件与其他开源软件进行交互，那么在Linux上测试可以更好地与这些项目集成。</p></li><li><p><strong>脚本和自动化测试：</strong> Linux上有丰富的脚本和自动化测试工具，如Shell脚本、Python等。这些工具可以帮助测试人员编写自动化测试脚本，从而提高测试效率和一致性。</p></li><li><p><strong>性能和稳定性测试：</strong> Linux通常在高性能和稳定性方面表现出色。许多企业和项目需要测试软件在高负载情况下的性能和稳定性，因此在Linux上进行这些测试可以提供更真实的结果。</p></li><li><p><strong>开发者工具和调试：</strong> Linux提供了丰富的开发者工具和调试选项，这对于诊断和解决软件问题非常有帮助。测试人员可以使用这些工具来检查和修复潜在的错误。</p></li></ol><p>总之，Linux作为一个多样性、稳定性和性能强大的操作系统，为软件测试提供了一个理想的平台，可以确保软件在各种不同情况下都能正常运行。</p><h2 id="软件测试中常用的linux命令"><a href="#软件测试中常用的linux命令" class="headerlink" title="软件测试中常用的linux命令"></a>软件测试中常用的linux命令</h2><p>在软件测试中，以下是一些常用的Linux命令，可以帮助你进行测试和排查问题：</p><ol><li><strong>ls</strong>: 列出目录中的文件和子目录。</li><li><strong>cd</strong>: 切换当前工作目录。</li><li><strong>pwd</strong>: 显示当前工作目录的路径。</li><li><strong>mkdir</strong>: 创建新目录。</li><li><strong>cp</strong>: 复制文件或目录。</li><li><strong>mv</strong>: 移动文件或目录，也可以用于重命名文件。</li><li><strong>rm</strong>: 删除文件或目录。请小心使用，避免误删重要数据。</li><li><strong>grep</strong>: 在文件中搜索指定的文本模式。</li><li><strong>cat</strong>: 显示文件的内容。<br>例：<code>$ cat /proc/version</code>查看当前系统内核版本信息<br><code>$ cat /etc/redhat- release</code>查看当前系统发行版本信息</li><li><strong>tail</strong>: 显示文件的末尾内容，常用于查看日志文件。<br>例：<code>$ tail -f</code>动态查看日志文件内容<br><code>$ tail -行数 文件名</code>查看文件的后X行内容</li><li><strong>head</strong>: 显示文件的开头内容。</li><li><strong>chmod</strong>: 修改文件或目录的权限。</li><li><strong>chown</strong>: 修改文件或目录的所有者。</li><li><strong>ps</strong>: 显示当前运行的进程。<br>例：<code>$ ps -aux</code>:查看当前系统下的进程信息<br><code>$ ps -aux | grep firefox</code>获取火狐浏览器的进程信息（ID）</li><li><strong>top</strong>: 动态显示系统中运行的进程和资源使用情况。</li><li><strong>kill</strong>: 终止运行中的进程。</li><li><strong>netstat</strong>: 显示网络连接、路由和接口信息。<br>例：<code>$ netstat -anptu</code>查看当前系统中（网络相关信息）开放的端口有哪些<br><code>$ netstat -tunlp | grep 端口号</code>查看指定端口号的进程情况</li><li><strong>ifconfig</strong>: 显示和配置网络接口。</li><li><strong>lsof -i:端口号</strong>：查看占用某一端口的程序名称及进程ID（需要root用户权限）。<br>注意：1.可以通过<code>$ kill -9 进程ID</code>命令完成对端口占用程序的移除</li><li><strong>ping</strong>: 测试与其他主机的网络连接。</li><li><strong>traceroute</strong>: 显示数据包在网络上的传输路径。</li><li><strong>wget</strong>: 下载文件或资源。</li><li><strong>curl</strong>: 发送HTTP请求并显示响应。</li><li><strong>tar</strong>: 创建、压缩和解压缩归档文件。<br>例：<code>$ tar -zcvf test.tar.gz file01 dir01</code>压缩文件file01和目录dir01到test.tar.gz<br><code>tar -zxvf test.tar.gz</code>解压test.tar.gz(将 c 换成 x 即可)<br><code>tar -ztvf test.tar.gz</code>列出压缩文件的内容</li><li><strong>diff</strong>: 比较两个文件的差异。</li><li><strong>ssh</strong>: 安全登录到远程主机。</li><li><strong>scp</strong>: 在本地主机和远程主机之间复制文件。</li><li><strong>rsync</strong>: 同步文件和目录之间的内容。</li><li><strong>reboot</strong>：重启当前系统。</li><li><strong>shutdown</strong>：关闭当前系统。<br>例：<code>$ shutdown -h now</code>立即关闭系统</li><li><strong>touch</strong>：在当前目录下创建文件。例：<code>$ touch cm_demo</code>在当前目录下创建文件cm_demo</li></ol><p>这些命令可以帮助你在Linux环境中进行常见的测试任务和故障排除。记住，在使用这些命令时要小心谨慎，以免对系统造成不必要的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack——学习webpack的基本使用</title>
      <link href="/2023/08/28/webpack-xue-xi-webpack-de-ji-ben-shi-yong/"/>
      <url>/2023/08/28/webpack-xue-xi-webpack-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Webpack是当今前端开发中不可或缺的工具之一，它不仅仅是一个静态模块打包器，更是现代应用程序构建的核心引擎。在日益复杂的前端项目中，模块化、代码优化和资源管理变得尤为重要，而Webpack以其强大的功能和灵活的配置，为开发者提供了一种高效、可靠的方式来处理这些挑战。通过将各种资源打包成优化的文件、自动化繁琐的转换过程，甚至实现热模块替换以提升开发体验，Webpack在现代Web开发中扮演着不可或缺的角色。无论是构建小型应用还是复杂的单页应用，Webpack都是前端工程师的得力助手，帮助他们更好地管理代码、提升性能，并在不断变化的Web领域中保持竞争力。</p><hr><p><code>提示：本篇文章中，npm命令后跟@+版本号的，都是因为webpack与插件和加载器之间都有版本兼容性问题</code></p><h2 id="一、了解webpack及其特点"><a href="#一、了解webpack及其特点" class="headerlink" title="一、了解webpack及其特点"></a>一、了解webpack及其特点</h2><p>Webpack是一个现代化的JavaScript应用程序静态模块打包工具。它主要用于将多个前端资源，如JavaScript、样式、图像等，打包成一个或多个最终的文件，以便于在浏览器中加载和运行。Webpack不仅仅是一个打包工具，还可以进行代码转换、优化和模块管理。<br>Webpack的主要特点包括：</p><ol><li><strong>模块化打包：</strong> Webpack允许将应用程序拆分为模块，然后通过定义模块之间的依赖关系，将它们打包成一个或多个bundle。</li><li><strong>加载器（Loaders）：</strong> Webpack使用加载器来处理非JavaScript资源，如将Sass或Less文件转换为CSS，或者将ES6+代码转换为ES5代码。</li><li><strong>插件（Plugins）：</strong> 插件是用于执行各种任务的工具，如压缩代码、生成HTML文件、提取CSS、代码分割等。</li><li><strong>代码分割：</strong> Webpack支持将代码拆分成多个bundle，这有助于减小初始加载的大小，提高应用程序的性能。</li><li><strong>热模块替换（HMR）：</strong> HMR允许在应用程序运行时，替换、添加或删除模块，从而实现实时预览，无需完全刷新页面。</li><li><strong>自动化工作流：</strong> 通过Webpack的配置文件，您可以定义自定义的构建流程，包括代码转换、代码分割、压缩等。</li><li><strong>开发服务器：</strong> Webpack提供了一个开发服务器，它支持实时重新加载和HMR，方便开发过程中的调试。</li></ol><p>Webpack在现代前端开发中非常流行，能够处理复杂的依赖关系、代码优化和模块化，从而提高开发效率和应用程序性能。通过适当的配置，Webpack可以满足不同项目的需求，无论是小型应用还是大型单页应用。</p><h2 id="二、webpack的基本使用"><a href="#二、webpack的基本使用" class="headerlink" title="二、webpack的基本使用"></a>二、webpack的基本使用</h2><h3 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1.项目初始化"></a>1.项目初始化</h3><p> （1）创建项目空白目录，并运行 <code>npm init -y </code>命令，初始化包管理配置文件 <em>package.json</em>；<br> （2）新建 src 源代码目录；<br> （3）新建 <em>src -&gt;index.html</em> 首页；<br>（4）初始化首页基本的结构。</p><h3 id="2-在项目中安装和配置webpack"><a href="#2-在项目中安装和配置webpack" class="headerlink" title="2.在项目中安装和配置webpack"></a>2.在项目中安装和配置webpack</h3><p>（1）运行 <code>npm install webpack webpack-cli -D </code>/ <code>npm install   webpack@4     webpack-cli@3 -D</code>命令，安装webpack相关的包；<br>（2）在项目根目录中，创建名为 <em>webpack.config.js</em> 的webpack 配置文件；<br> （3）在 webpack 的配置文件中，初始化如下基本配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// mode用来指定编译模式</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span> <span class="token comment">//development  production</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（4）在 <em>package.json</em> 配置文件中的 scripts节点下，新增dev脚本如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>        <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack"</span> <span class="token comment">//npm run dev运行</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（5）在终端中运行<code> npm run dev 命令</code>，启动 webpack 进行项目打包。</p><h3 id="3-配置打包的入口与出口"><a href="#3-配置打包的入口与出口" class="headerlink" title="3.配置打包的入口与出口"></a>3.配置打包的入口与出口</h3><p>webpack的4.x版本中默认约定：</p><ul><li>打包的入口文件为 <em>src -&gt; index.js</em></li><li>打包的输出文件为 <em>dist -&gt; main.js</em></li></ul><p>如果想要修改打包的入口与出口，可以在 <em>webpack.config.js</em>中新增如下配置信息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token comment">//导入node.js中专门操作路径的模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 编译模式</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment">//development  production</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//打包入口文件的路径</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//输出文件的存放路径</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'bundle.js'</span> <span class="token comment">//输出文件的名称</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置webpack的自动打包功能"><a href="#4-配置webpack的自动打包功能" class="headerlink" title="4.配置webpack的自动打包功能"></a>4.配置webpack的自动打包功能</h3><p>（1）运行<code>npm install webpack-dev-server@3 -D</code>命令，安装支持项目自动打包的工具；<br>（2）修改 <em>package.json -&gt;scripts</em> 中的dev命令如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>        <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server"</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）将 <em>src -&gt; index.html</em> 中，script 脚本的引用路径，修改为 *’/bundle.js’<em>；<br> （4）运行 <code>npm run dev</code> 命令，重新进行打包<br>（5）在浏览器中访问</em><a href="http://localhost:8080/*%E5%9C%B0%E5%9D%80%EF%BC%8C%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E6%95%88%E6%9E%9C">http://localhost:8080/*地址，查看自动打包效果</a></p><h3 id="5-配置html-webpack-plugin生成预览页面"><a href="#5-配置html-webpack-plugin生成预览页面" class="headerlink" title="5.配置html-webpack-plugin生成预览页面"></a>5.配置html-webpack-plugin生成预览页面</h3><p>（1）运行 <code>npm install html-webpack-plugin -D </code>命令，安装生成预览页面的插件<br>（2）修改 <em>webpack.config.js</em> 文件头部区域添加如下配置信息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导入生成预览页面的插件，得到一个构造函数</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> htmlPlugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">//创建插件的实例对象</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span><span class="token comment">//指定要用到的模板文件</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token comment">//指定生成的文件的名称，该文件存在于内存中，在目录中不显示</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）修改 <em>webpack.config.js</em> 文件中向外暴露的配置对象，新增如下配置节点：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>htmlPlugin<span class="token punctuation">]</span><span class="token comment">//plugin数组是webpack打包期间会用到的一些插件列表</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-配置自动打包相关的参数"><a href="#6-配置自动打包相关的参数" class="headerlink" title="6.配置自动打包相关的参数"></a>6.配置自动打包相关的参数</h3><p>相关配置代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//package.json中的配置</span><span class="token comment">//--open 打包完成后自动打开浏览器页面</span><span class="token comment">//--host 配置 IP地址</span><span class="token comment">//--port 配置端口</span><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --host 127.0.0.1 --port 8888"</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、webpack中的加载器（loader）"><a href="#三、webpack中的加载器（loader）" class="headerlink" title="三、webpack中的加载器（loader）"></a>三、webpack中的加载器（loader）</h2><p>在实际的开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块，其他非 .js 后缀名结尾的模块，webpack 默认处理不了，需要调用 loader 加载器才可以正常打包，否则会报错！<br>loader 加载器可以协助 webpack 打包处理特定的文件模块，比如：</p><ul><li>less-loader 可以打包处理  .less 相关的文件</li><li>sass-loader 可以打包处理  .sass 相关的文件</li><li>url-loader 可以打包处理  css 中与 url 路径相关的文件</li></ul><h3 id="1-打包处理css文件"><a href="#1-打包处理css文件" class="headerlink" title="1.打包处理css文件"></a>1.打包处理css文件</h3><p>（1）运行<code>npm install style-loader css-loader -D</code>命令，安装处理 css 文件的 loader；<br>（2）在 <em>webpack.config.js</em> 的<em>module -&gt;rules</em> 数组中，添加loader规则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//所有第三方文件模块的匹配规则</span><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，test 表示匹配的文件类型，use 表示对应要调用的 loader 注意： </p><ul><li>use 数组中指定的 loader 顺序是固定的</li><li>多个 loader 的调用顺序是：从后往前调用</li></ul><h3 id="2-打包处理less文件"><a href="#2-打包处理less文件" class="headerlink" title="2.打包处理less文件"></a>2.打包处理less文件</h3><p>（1）运行<code> npm install less-loader@4 less@3 -D</code> 命令，安装处理 less 文件的 loader；<br>（2）在 <em>webpack.config.js</em> 的 <em>module -&gt;rules</em> 数组中，添加 loader 规则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//所有第三方文件模块的匹配规则</span><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-打包处理scss文件"><a href="#3-打包处理scss文件" class="headerlink" title="3.打包处理scss文件"></a>3.打包处理scss文件</h3><p>（1）运行 <code>npm install sass-loader@7 node-sass@4.12 -D </code>命令，安装处理 scss 文件的 loader；<br>（2）在 <em>webpack.config.js</em> 的 <em>module -&gt;rules</em> 数组中，添加loader规则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//所有第三方文件模块的匹配规则</span><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-配置postcss自动添加css的兼容前缀"><a href="#4-配置postcss自动添加css的兼容前缀" class="headerlink" title="4.配置postcss自动添加css的兼容前缀"></a>4.配置postcss自动添加css的兼容前缀</h3><p>（1）运行<code>npm install postcss-loader@4 autoprefixer@9 -D</code>命令；<br>（2）在项目根目录中创建postcss的配置文件 ；<em>postcss.config.js</em>，并初始化如下配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span> <span class="token comment">//导入自动添加前缀的插件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">plugin</span><span class="token operator">:</span> <span class="token punctuation">[</span>autoprefixer<span class="token punctuation">]</span> <span class="token comment">//挂载插件</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在webpack.config.js的 module -&gt; rules 数组中，修改css的loader规则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>           <span class="token comment">//其他规则……</span>           <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>       <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-打包样式表中的图片和字体文件"><a href="#5-打包样式表中的图片和字体文件" class="headerlink" title="5.打包样式表中的图片和字体文件"></a>5.打包样式表中的图片和字体文件</h3><p>（1）运行 <code>npm install url-loader file-loader -D </code>命令；<br>（2）在 <em>webpack.config.js</em> 的 <em>module -&gt; rules</em> 数组中，添加 loader 规则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">//其他规则……</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'url-loader?limit=20046'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 ？之后的是 loader 的参数项。limit 用来指定图片的大小，单位是字节（byte），只有小于 limit 大小的图片，才会被转为 base64 图片。</p><h3 id="6-打包处理js文件中的高级语法"><a href="#6-打包处理js文件中的高级语法" class="headerlink" title="6.打包处理js文件中的高级语法"></a>6.打包处理js文件中的高级语法</h3><p>（1）安装 babel 转换器相关的包：<code>npm install babel-loader@8.0.4 @babel/core@7.2.2 @babel/runtime -D</code>；<br>（2）安装babel语法插件相关的包：<code>npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</code>；<br>（3）在项目根目录中，创建 babel 配置文件 <em>babel.config.js</em> 并初始化如下配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/plugin-transform-runtime'</span><span class="token punctuation">,</span> <span class="token string">'@babel/plugin-proposal-class-properties'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（4）在 <em>webpack.config.js</em> 的 <em>module -&gt; rules</em> 数组中，添加loader 规则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">//其他规则……</span>        <span class="token comment">//exclude为排除项，表示babel-loader不需要处理node_moudles中的js文件</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span> <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Vue单文件组件"><a href="#四、Vue单文件组件" class="headerlink" title="四、Vue单文件组件"></a>四、Vue单文件组件</h2><h3 id="1-传统组件的问题和解决方案"><a href="#1-传统组件的问题和解决方案" class="headerlink" title="1.传统组件的问题和解决方案"></a>1.传统组件的问题和解决方案</h3><p><strong>问题：</strong><br>（1）全局定义的组件必须保证组件的名称不重复；<br>（2）字符串模板缺乏语法高亮，在HTML有多行的时候，需要用到丑陋的 <code>\</code>；<br>（3）不支持CSS意味着当HTML和JavaScript组件化时，CSS明显被遗漏；<br>（4）没有构建步骤限制，只能使用HTML和ES5 JavaScript，而不能使用预处理器（如：babel）；<br><strong>解决方案：</strong><br>针对传统组件的问题，Vue提供了一个解决方案——使用Vue单文件组件。</p><h3 id="2-Vue单文件组件的用法"><a href="#2-Vue单文件组件的用法" class="headerlink" title="2.Vue单文件组件的用法"></a>2.Vue单文件组件的用法</h3><p>单文件组件的组成结构：</p><ul><li>template  组建的模板区域</li><li>script  业务逻辑区域</li><li>style  样式区域</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token comment">//这里用于定义Vue组建的模板内容</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">//这里用于定义Vue组建的业务逻辑</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//私有数据</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//处理函数</span>    <span class="token comment">//...其他业务逻辑</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span><span class="token comment">//这里用于定义组件的样式</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-webpack中配置vue组件的加载器"><a href="#3-webpack中配置vue组件的加载器" class="headerlink" title="3.webpack中配置vue组件的加载器"></a>3.webpack中配置vue组件的加载器</h3><p>（1）运行<code>npm install vue-loader@15.6.1 vue-template-compiler -D</code>命令<br>（2）在 <em>webpack.config.js</em> 配置文件中，添加 vue-loader 的配置项如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    htmlPlugin<span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//确保引入这个插件！</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token comment">//其他规则……</span>            <span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'vue-loader'</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-在webpack项目中使用vue"><a href="#4-在webpack项目中使用vue" class="headerlink" title="4.在webpack项目中使用vue"></a>4.在webpack项目中使用vue</h3><p>（1）运行<code> npm install vue -s 安装vue</code>；<br>（2）在 <em>src -&gt; index.js</em> 入口文件中，通过<code>import Vue from 'vue'</code>来导入 vue构造函数；<br>（3）创建 vue的实例对象，并指定要控制的 el 区域；<br>（4）通过 render 函数渲染 App根组件；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入Vue构造函数</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 导入App根组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./components/App.vue'</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 指定vm实例要控制的页面区域</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token comment">// （webpack下）通过render函数，把指定的组件渲染到el区域中</span>    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-webpack打包发布"><a href="#5-webpack打包发布" class="headerlink" title="5.webpack打包发布"></a>5.webpack打包发布</h3><p>上线之前需要通过 webpack 将应用进行整体打包，可以通过 <em>package.json</em> 文件配置打包命令：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在package.json文件中配置webpack打包命令</span><span class="token comment">//该命令默认加载项目根目录中的 webpack.config.js 配置文件</span><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>        <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open --host 127.0.0.1 --port 8888"</span><span class="token punctuation">,</span>        <span class="token comment">//用于打包的命令</span>        <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack -p"</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文仅仅简单介绍了webpack在前端开发中简单基本的使用，以及如何借助插件和加载器来协助自己完成项目开发。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js——同时安装多个版本以及相关配置（简单易操作）</title>
      <link href="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/"/>
      <url>/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Node.js是一个基于V8引擎的开源运行时环境，用于在服务器端运行JavaScript代码。它允许您使用JavaScript来编写服务器端应用程序，如网络应用、API和后端服务，而不仅仅局限于在浏览器中执行。Node.js的非阻塞I/O和事件驱动的特性使其特别适合处理高并发的网络应用程序。本篇主要介绍node.js的安装和配置，以及如何在自己的电脑上安装多个版本的node.js，以便解决很多情况下由于node版本限制导致的一些麻烦。<br><strong>提示：</strong>此篇非使用NVM（node.js version management）node.js版本管理工具！</p><hr><h1 id="一、为什么要学习Node-js？"><a href="#一、为什么要学习Node-js？" class="headerlink" title="一、为什么要学习Node.js？"></a>一、为什么要学习Node.js？</h1><p>学习Node.js有如下几个好处：</p><ol><li><p><strong>一致的编程语言：</strong> 如果您已经熟悉JavaScript，学习Node.js可以让您在前端和后端使用相同的编程语言，减少学习曲线和切换成本。</p></li><li><p><strong>高性能：</strong> Node.js的非阻塞I/O和事件驱动架构使其在处理大量并发连接时表现出色，适用于构建实时应用和高性能的网络应用程序。</p></li><li><p><strong>丰富的生态系统：</strong> Node.js拥有庞大的开源社区，提供了许多可扩展的模块和库，可以帮助您快速构建功能丰富的应用程序。</p></li><li><p><strong>快速开发：</strong> 使用Node.js可以快速开发原型和MVP（最小可行产品），并以较短的时间推出产品。</p></li><li><p><strong>轻量级和高效：</strong> Node.js在资源使用方面表现出色，可以处理大量的请求而不占用太多的系统资源。</p></li><li><p><strong>跨平台：</strong> Node.js支持多个操作系统，使您可以在不同的环境中运行相同的代码。</p></li><li><p><strong>适用于微服务架构：</strong> Node.js适合构建微服务，可以将大型应用拆分为小型、独立的服务单元，更容易维护和扩展。</p></li></ol><p>对于前端开发人员而言，学习Node.js可以使您具备构建高性能、实时性强的应用程序的能力，而且可以利用JavaScript的灵活性和丰富的生态系统。</p><h1 id="二、从低到高安装Node-js"><a href="#二、从低到高安装Node-js" class="headerlink" title="二、从低到高安装Node.js"></a>二、从低到高安装Node.js</h1><p>安装注意事项：<br>首先，确保须从低版本开始往高版本安装，否则从高版本安装会产生许多问题，如果已经存在高版本的需要先卸载掉，然后从你个人需要的低版本node.js开始安装。</p><h2 id="1-卸载已有的高版本node"><a href="#1-卸载已有的高版本node" class="headerlink" title="1.卸载已有的高版本node"></a>1.卸载已有的高版本node</h2><h3 id="1-1卸载node-js的三种方式"><a href="#1-1卸载node-js的三种方式" class="headerlink" title="1.1卸载node.js的三种方式"></a>1.1卸载node.js的三种方式</h3><p>（1）就是你在安装这个软件以后，这个软件就自己带有一个卸载的程序，你只要点击：开始—程序—找到这个程序—-上面就会有这个程序的卸载程序。uninstall node.js<br>（2）就是通过“卸载程序”来卸载，这个程序一般的Windows，自己都会带这个程序，你点：开始–控制面板—卸载程序—-找到这个要卸载的程序—点“卸载”就OK了。<br>（3）就是利用第三方软件。<br>我用腾讯电脑管家举例（免费安全软件，杀毒+管理2合1）。<br>打开腾讯电脑管家——工具箱——软件卸载。<br>电脑管家是直接把软件卸载同时把注册列表也就清理了。（有的软件重启后会自动删除）卸载完之后，会有残留，在实行强力卸载。</p><h3 id="1-2检查是否卸载成功"><a href="#1-2检查是否卸载成功" class="headerlink" title="1.2检查是否卸载成功"></a>1.2检查是否卸载成功</h3><p>（1）在原文件目录查看是否卸载干净<br>（2）win+R，输入cmd，打开控制台，输入node -v，查看版本<br>（3）win+R，输入cmd，打开控制台，输入where node，查看文件所在目录</p><h2 id="2-下载node-js"><a href="#2-下载node-js" class="headerlink" title="2.下载node.js"></a>2.下载node.js</h2><p>（1）node的版本可以去 <a href="https://nodejs.org/">nodejs官方网站</a> 下载 或者在 <a href="https://nodejs.org/dist/">这里</a> 下载都可以，Node.js有不同的版本，包括 LTS（长期支持）版本和最新版本。如果您希望稳定性和可靠性，可以选择LTS版本。</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/1.png" class=""><p>（2）建议下载 .zip 压缩文档，文档小，下载速度快，想安装在哪里就在哪里解压。旧版本的node在上图中的 Other Downloads 里面，可以点击下面的 Releases 进行下载。</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/2.png" class="">     <h2 id="3-安装node-js"><a href="#3-安装node-js" class="headerlink" title="3.安装node.js"></a>3.安装node.js</h2><h3 id="3-1解压下载完的node-js压缩包"><a href="#3-1解压下载完的node-js压缩包" class="headerlink" title="3.1解压下载完的node.js压缩包"></a>3.1解压下载完的node.js压缩包</h3><p>在安装node之前，我先选择一个node安装目录，我要安装到D盘下，所以我在D盘中新建啦一个nodejs的目录，把node-v10.2.1-win-x64.zip压缩包文件解压进去这个目录，此时文件名为压缩包名，我们就给它改名为node-v10.2.1（有说法是不改名后续安装其他版本会覆盖掉，未经实验）。</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/3.png" class=""><h3 id="3-2配置环境变量"><a href="#3-2配置环境变量" class="headerlink" title="3.2配置环境变量"></a>3.2配置环境变量</h3><p>（1）node安装好后暂时不能使用，你还需要配置环境变量，找到打开你的安装node的路径，复制绝对路径如下：</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/4.png" class=""><p>（2）在此电脑鼠标右键依次打开：计算机=&gt; 属性=&gt; 高级系统设置=&gt;环境变量  将自己的node环境变量配置好。在系统变量的Path编辑：</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/5.png" class=""><p>（3）将你复制好的node（node.exe所在目录）的绝对路径，在此处新建并粘贴上即可。</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/6.png" class=""><p>（4）配置完成后点击确定，然后咱们打开CMD (win+R)，输入: node -v 命令检验：</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/7.png" class=""><p>如此，第一个版本就安装成功了！<br>接下来安装第二个版本，也是在相同 nodejs 目录下，把node-v12.20.0-win-x64.zip压缩包文件解压进去这个目录，此时文件名为压缩包名，我们给它改名为node-v12.20.0方便识别，配置环境变量和上面过程一样。</p><h3 id="3-3验证安装成果"><a href="#3-3验证安装成果" class="headerlink" title="3.3验证安装成果"></a>3.3验证安装成果</h3><p>验证我们目前是否是安装了两个node版本：where node ，和当前使用的版本：node -v，我这里安装了三个，其实过程都是这样的，你还可以安装更多个。</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/8.png" class=""><h3 id="3-4自由切换node-js版本"><a href="#3-4自由切换node-js版本" class="headerlink" title="3.4自由切换node.js版本"></a>3.4自由切换node.js版本</h3><p>（1）打开系统环境变量，找到path，你想用哪个版本，就把哪个node变量放到所有node变量的最前面，比如我之前用的就是10.2.1的版本，此时；</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/9.png" class=""><p>（2）如果我想使用 12.20.0 的版本，可以通过右边的上下移按钮更换位置。</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/10.png" class=""><p>（3）然后咱们打开CMD (win+R)，输入： node -v，看此时的node版本：</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/11.png" class=""><p>很显然，切换成功！</p><h1 id="三、Node-js配置全局安装路径"><a href="#三、Node-js配置全局安装路径" class="headerlink" title="三、Node.js配置全局安装路径"></a>三、Node.js配置全局安装路径</h1><p>  Node.js安装包通常会附带npm（Node Package Manager），它是用于安装、管理和共享Node.js模块（包）的工具。安装Node.js时会自动安装npm，无需额外操作。</p><h2 id="1-了解全局和局部的概念"><a href="#1-了解全局和局部的概念" class="headerlink" title="1.了解全局和局部的概念"></a>1.了解全局和局部的概念</h2><p> <strong>（1）全局安装：</strong> 当你通过在命令行中运行 <code>npm install -g &lt;package-name&gt;</code> 进行全局安装时，所安装的包会在系统范围内可用，而不仅仅是在特定项目中（当用户在程序中require(package-name)的时候不用考虑模块在哪）。全局安装的包通常提供命令行工具，使你可以从终端直接运行它们。这些包位于一个预定义的全局安装路径中，通常需要管理员权限。全局安装的包对于系统中的所有项目都是可用的。</p><p><strong>（2）局部安装：</strong> 当您在项目文件夹中运行 <code>npm install &lt;package-name&gt;</code> 时，所安装的包会局部安装在该项目的 <code>node_modules</code> 文件夹中。局部安装的包只对当前项目可用，不会影响其他项目。这种方式允许您在不同项目中使用不同版本的包，避免了全局包可能引发的冲突问题。</p><h2 id="2-修改全局安装路径和局部缓存路径"><a href="#2-修改全局安装路径和局部缓存路径" class="headerlink" title="2.修改全局安装路径和局部缓存路径"></a>2.修改全局安装路径和局部缓存路径</h2><p>如果不修改全局安装<code>node_global</code>和局部缓存 <code>node_cache</code> 路径，用户下载的全局和局部模块会默认在C:\Users\Administrator\AppData\Roaming\npm这个路径下。修改步骤如下：<br>（1）在 nodejs 安装目录下，创建 <code>node_global</code>和 <code>node_cache</code>两个文件夹</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/12.png" class=""><p>(2)进入 cmd 命令行，输入如下命令，设置全局模块的安装路径到 <code>node_global</code>文件夹，设置缓存到 <code>node_cache</code>文件夹<br>更改全局缓存路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"D:<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">"D:<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改局部缓存路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache-min <span class="token string">"D:<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_cache"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）由于 node 全局模块大多数都是可以通过命令行访问的，还要把 “D:\nodejs\node_global” 加入到系统环境变量 PATH 中，方便直接使用命令行运行</p><img src="/2023/08/26/node-js-tong-shi-an-zhuang-duo-ge-ban-ben-yi-ji-xiang-guan-pei-zhi-jian-dan-yi-cao-zuo/13.png" class=""><p> （4）检查是否配置成功，在cmd中运行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>npm get prefix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>npm get cache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-配置淘宝镜像"><a href="#3-配置淘宝镜像" class="headerlink" title="3.配置淘宝镜像"></a>3.配置淘宝镜像</h2><p> 配置淘宝镜像是为了加速 npm 包的下载和安装过程，特别是在中国地区。npm 默认从国外服务器下载包，但由于网络限制等原因，可能会导致下载速度较慢，甚至失败。</p><p>配置淘宝镜像的好处：</p><ol><li><p><strong>加快下载速度：</strong> 淘宝镜像位于国内服务器上，因此从该镜像下载 npm 包会更快，减少了网络延迟。</p></li><li><p><strong>解决网络问题：</strong> 在一些情况下，访问国外服务器可能会受到网络限制或防火墙的影响，导致无法下载包。使用淘宝镜像可以避免这些问题。</p></li><li><p><strong>稳定性：</strong> 由于淘宝镜像是在国内提供的，因此在网络不稳定的情况下，从该镜像下载的机会更高，可以避免下载中断或失败。</p></li></ol><p>配置方式如下：<br>（1）首先，可查看npm默认使用的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>npm config get registryhttps://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）进入 cmd 命令行， 执行 npm 淘宝镜像配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置镜像站</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">registry</span><span class="token operator">=</span>http://registry.npm.taobao.org<span class="token comment"># 检查一下镜像站是否正常</span><span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是如何给Node.js同时安装多个版本以及相关配置的内容，个人觉得非常简单易操作的，按照步骤来做，一般不会有什么问题。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo——如何写markdown文档并使用hexo发布博客</title>
      <link href="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/"/>
      <url>/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些小伙伴好不容易博客搭建好了，但是不知道怎么写博客，不知道写一些什么，也不知道怎么发布，最后逃脱不了放在那里吃灰的命运。大佬们写博客是用来分享技术，分享经验的，我们不是大佬，但是我们也可以拿来当笔记使用嘛，记录一些有趣的事情，分享一些旅游札记，哪怕当个日记簿用呢@ <a href="https://liyixuan33.github.io/">liyixuan</a></p><hr><h2 id="一、怎么写博客？"><a href="#一、怎么写博客？" class="headerlink" title="一、怎么写博客？"></a>一、怎么写博客？</h2><p>首先我们要知道自己的博客文件的存放目录是在博客根目录~/source/_posts的里面存放着的。</p><h2 id="二、写博客的步骤"><a href="#二、写博客的步骤" class="headerlink" title="二、写博客的步骤"></a>二、写博客的步骤</h2><h3 id="1-新建一个博客-hexo-new-“博客主题名”"><a href="#1-新建一个博客-hexo-new-“博客主题名”" class="headerlink" title="1.新建一个博客 hexo new “博客主题名”"></a>1.新建一个博客 hexo new “博客主题名”</h3><p>在博客根目录下，右键打开git bush，运行 hexo new “博客主题名” 命令，它会自动生成一个 .md 文件和一个同名文件夹，文件夹里面可以用来存放同名 .md文档里用到的图片。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new “博客主题名”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/1.png" class=""><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/2.png" class=""><p>如果想要同时自动生成同名文件夹，需要在根目录下的 _config.yml 打开这个配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-在markdown、VS-Code、记事本等编辑器里打开-md-文件并编辑"><a href="#2-在markdown、VS-Code、记事本等编辑器里打开-md-文件并编辑" class="headerlink" title="2.在markdown、VS Code、记事本等编辑器里打开 .md 文件并编辑"></a>2.在markdown、VS Code、记事本等编辑器里打开 .md 文件并编辑</h3><p>常用的 md 语法如下（示例）：</p><pre><code>标题：# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题文本样式：*强调文本* _强调文本_**加粗文本** __加粗文本__==标记文本==~~删除文本~~&gt; 引用文本H~2~O is是液体。2^10^ 运算结果是 1024。列表：- 项目* 项目+ 项目1. 项目12. 项目23. 项目3- [ ] 计划任务- [x] 完成任务图片：图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png)带尺寸的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png =60x60)宽度确定高度等比例的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png =60x)高度确定宽度等比例的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png =x60)居中的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png#pic_center)居中并且带尺寸的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png#pic_center =60x60)居右的图片: ![Alt](https://img-home.csdnimg.cn/images/20220524100510.png#pic_right)链接：链接: [link](https://www.csdn.net/)目录：@[TOC](这里写目录标题)# 一级目录## 二级目录### 三级目录代码片：下面展示一些 `内联代码片`。<pre class="line-numbers language-none"><code class="language-none">// A code blockvar foo = 'bar';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// An highlighted block</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>表格：项目     | Value-------- | -----电脑  | $1600手机  | $12导管  | $1| Column 1 | Column 2      ||:--------:| -------------:|| centered 文本居中 | right-aligned 文本居右 |</code></pre><h3 id="3-编辑-markdown-文档的快速入门方法，新手推荐！"><a href="#3-编辑-markdown-文档的快速入门方法，新手推荐！" class="headerlink" title="3.编辑 markdown 文档的快速入门方法，新手推荐！"></a>3.编辑 markdown 文档的快速入门方法，新手推荐！</h3><p>   打开csdn网站，在创作中新的首页，有一个 markdown 编辑器，使用起来对新手非常友好<br>   <img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/3.png" class=""><br>不仅有语法介绍，还有很多的新手模板可以选择</p><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/4.png" class=""><p>还可以在左边编辑同时在右边预览，对着模板改，比葫芦画瓢，编写完成后可以导出为md文件</p><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/5.png" class=""><h3 id="4-将上一步导出的md文件中的内容移植到第一部创建的md文件中。"><a href="#4-将上一步导出的md文件中的内容移植到第一部创建的md文件中。" class="headerlink" title="4.将上一步导出的md文件中的内容移植到第一部创建的md文件中。"></a>4.将上一步导出的md文件中的内容移植到第一部创建的md文件中。</h3><p> 这一步只需要把导出的md打开，复制粘贴到你自己创建的md文档中，这里呢，并不是粘贴完成之后就万事大吉了，如下图所示，是导出 md 文档中的插入图片语法格式，标准的markdown语法：</p><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/6.png" class=""><p>然而，实际的运行效果却是：</p><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/7.png" class=""><h3 id="5-解决插入图片的问题，md-语法插入的图片可能会在-hexo中无法显示"><a href="#5-解决插入图片的问题，md-语法插入的图片可能会在-hexo中无法显示" class="headerlink" title="5.解决插入图片的问题，md 语法插入的图片可能会在 hexo中无法显示"></a>5.解决插入图片的问题，md 语法插入的图片可能会在 hexo中无法显示</h3><p>此时有一种解决办法，使用hexo支持的插入图片语法格式，插入图片语法如下：</p> <p><strong>注意：</strong>中间都有空格分开！要插入的图片都要放在 .md文件的同名文件夹里！</p><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/8.png" class=""><img src="/2023/08/24/hexo-ru-he-xie-markdown-wen-dang-bing-shi-yong-hexo-fa-bu-bo-ke/9.png" class=""><h3 id="6-发布编辑好的博客"><a href="#6-发布编辑好的博客" class="headerlink" title="6.发布编辑好的博客"></a>6.发布编辑好的博客</h3><p>打开 cmd 命令行工具，通过依次输入以下命令进行发布：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo chexo g <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此，编写的博客就发布成功了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是今天要分享的内容，本文主要介绍了如何写markdown文档并使用hexo发布博客的一些相关问题，仅为参考建议，不代表绝对规范。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo——解决使用Hexo搭建个人博客遇到的一些问题</title>
      <link href="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/"/>
      <url>/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天在使用Hexo和GitHub创建个人博客的时候遇到了一些问题，也可以说是坑吧，主要遇到的有两个，一个是刚开始初始化的时候，一个是最后一步部署到GitHub的时候。没错，就很离谱，一个是劝退你，一个是先给你希望，最后再让你绝望。我也是试了很久，才找到以下几种解决办法。</p><hr><h1 id="一、初始化阶段连接不到GitHub，一直克隆失败"><a href="#一、初始化阶段连接不到GitHub，一直克隆失败" class="headerlink" title="一、初始化阶段连接不到GitHub，一直克隆失败"></a>一、初始化阶段连接不到GitHub，一直克隆失败</h1><h2 id="1-在初始化阶段踩的坑，大多数人第一步都完成不了就很容易让人直接劝退。。。"><a href="#1-在初始化阶段踩的坑，大多数人第一步都完成不了就很容易让人直接劝退。。。" class="headerlink" title="1.在初始化阶段踩的坑，大多数人第一步都完成不了就很容易让人直接劝退。。。"></a>1.在初始化阶段踩的坑，大多数人第一步都完成不了就很容易让人直接劝退。。。</h2><p>在使用 hexo init 的时候出现下面这样的情况，简直让人不能忍受！！报错代码如下：<br>fatal: unable to access ‘<a href="https://github.com/hexojs/hexo-starter.git/">https://github.com/hexojs/hexo-starter.git/</a>‘: Recv failure: Connection was reset<br>WARN  git clone failed. Copying data instead<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="http://hexo.io/docs/troubleshooting.html">http://hexo.io/docs/troubleshooting.html</a><br>Error: EPERM: operation not permitted, mkdir ‘D:’</p><img src="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/1.png" class="" title="报错图片"><h2 id="2-这样的情况我遇到有两种原因："><a href="#2-这样的情况我遇到有两种原因：" class="headerlink" title="2.这样的情况我遇到有两种原因："></a>2.这样的情况我遇到有两种原因：</h2><h3 id="2-1既没有配置npm淘宝镜像又没有打开“科学上网“工具，这样的情况下，二者完成其一一般都能解决。"><a href="#2-1既没有配置npm淘宝镜像又没有打开“科学上网“工具，这样的情况下，二者完成其一一般都能解决。" class="headerlink" title="2.1既没有配置npm淘宝镜像又没有打开“科学上网“工具，这样的情况下，二者完成其一一般都能解决。"></a>2.1既没有配置npm淘宝镜像又没有打开“科学上网“工具，这样的情况下，二者完成其一一般都能解决。</h3><p> （1）配置 npm 淘宝镜像<br> 淘宝镜像是指淘宝提供的一个软件源，可以用于下载和安装各种软件包。为什么需要安装淘宝镜像呢？因为在国内，访问国外的软件源速度很慢，而淘宝镜像是国内的，下载速度快，可以提高软件安装的效率。打开 cmd 运行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 安装配置完成后，继续运行 hexo init 就能解决了。<br> （2）打开“科学上网”工具，直接运行 hexo init 就行了。</p><h3 id="2-2打开了“科学上网”工具，运行-hexo-init-还是一直报上面的错误！"><a href="#2-2打开了“科学上网”工具，运行-hexo-init-还是一直报上面的错误！" class="headerlink" title="2.2打开了“科学上网”工具，运行 hexo init 还是一直报上面的错误！"></a>2.2打开了“科学上网”工具，运行 hexo init 还是一直报上面的错误！</h3><p>这种情况下可能是科学上网工具不稳定导致的网络连接不稳定，这里建议关掉并退出工具，再次执行 hexo init 初始化命令，如果还是不行，这里推荐一种不用“科学上网”，不连接到GitHub也能初始化的操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ npx hexo init 【myblog】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 git bush 运行以上命令，简直是不愿意使用科学上网工具的小伙伴的福音！它会直接在当前空文件下创建一个 myblog 的文件并进行初始化。</p><img src="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/2.png" class="" title="创建成功图片"><h1 id="二、在最后一步将自己创建好的博客上传部署到github上，又出现报错！！！"><a href="#二、在最后一步将自己创建好的博客上传部署到github上，又出现报错！！！" class="headerlink" title="二、在最后一步将自己创建好的博客上传部署到github上，又出现报错！！！"></a>二、在最后一步将自己创建好的博客上传部署到github上，又出现报错！！！</h1><h2 id="1-问题描述如下"><a href="#1-问题描述如下" class="headerlink" title="1.问题描述如下"></a>1.问题描述如下</h2><p>ssh: connect to host github.com port 22: Connection timed out<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a><br>Error: Spawn failed<br>at ChildProcess.<anonymous> (D:\Myblog\myblog\node_modules\hexo-util\lib\spawn.js:51:21)<br>at ChildProcess.emit (events.js:314:20)<br>at ChildProcess.cp.emit (D:\Myblog\myblog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>at Process.ChildProcess._handle.onexit (internal/child_process.js:276:12)</anonymous></p><img src="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/3.png" class="" title="报错图片"><p>一般这种情况大多是网络原因导致的，科学上网工具不稳定，DNS解析被污染等因素。我们可以详细看看建立 ssh 连接的过程中发生了什么，可以使用 ssh -v命令，-v表示 verbose，会打出详细日志。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-vT</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/4.png" class="" title="日志图片"><p>从上图可以看出，虽然访问的IP地址目测也没什么毛病，但是不管重复几次它还是连接超时导致无法部署，然后它显示SSH也连接失败，说明这个 22 端口目前是有问题的。</p><h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h2><h3 id="2-1在-C-Users-Administrator-ssh-中找到-ssh文件夹（此前配置SSH时会生成该文件夹）"><a href="#2-1在-C-Users-Administrator-ssh-中找到-ssh文件夹（此前配置SSH时会生成该文件夹）" class="headerlink" title="2.1在 C:\Users\Administrator.ssh 中找到.ssh文件夹（此前配置SSH时会生成该文件夹）"></a>2.1在 C:\Users\Administrator.ssh 中找到.ssh文件夹（此前配置SSH时会生成该文件夹）</h3><p>在 .ssh 文件夹中新建文本文件 config ,不带后缀（可以新建文本文档，去掉 .txt 后缀）<br>打开 config 文件，输入以下内容，保存后即可，其中<a href="mailto:xxx@qq.com">xxx@qq.com</a> 为你自己的邮箱</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">Host github.comUser xxx@qq.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2修改hosts文件"><a href="#2-2修改hosts文件" class="headerlink" title="2.2修改hosts文件"></a>2.2修改hosts文件</h3><p>操作系统中 hosts 文件的权限优先级高于DNS服务器，在 C:\Windows\System32\drivers\etc 目录下找到并修改 hosts 文件，增加一条 github.com 的域名映射可以解决。</p><img src="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/5.png" class="" title="修改hosts图片"><p>再次运行<code>$ ssh -vT git@github.com</code>检查，发现连接成功了！</p><img src="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/6.png" class="" title="成功图片"><p>这里输入yes，就连接成功了！</p><img src="/2023/08/23/hexo-jie-jue-shi-yong-hexo-da-jian-ge-ren-bo-ke-yu-dao-de-yi-xie-wen-ti/7.png" class="" title="连接成功图片"><p>最后，输入 hexo d 就能够上传部署成功了！</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是所有要说的内容了，只是我个人在搭建过程中遇到的一些问题，仅供参考一下，每个人遇到的问题可能都是不一样的，具体问题具体分析，多查查，多看看，一般都能解决的。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo——通过Hexo和GitHub搭建个人博客</title>
      <link href="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/"/>
      <url>/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="通过Hexo和GitHub搭建个人博客"><a href="#通过Hexo和GitHub搭建个人博客" class="headerlink" title="通过Hexo和GitHub搭建个人博客"></a>通过Hexo和GitHub搭建个人博客</h1><p>Hexo是一个基于Node.js的静态博客生成框架，它允许你用Markdown语法编写博客文章，并将其转换为HTML页面。通过Hexo，你可以方便地创建和管理个人博客，然后将生成的静态页面部署到网络服务器上。这使得博客的管理和发布变得更加简单和高效。<br>首先电脑要安装配置有git环境和node环境，还要有自己的GitHub账号。以下是Hexo与Node.js的版本对应关系：</p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/1.png" class="" title="Hexo与Node.js的版本对应"><p>接下来我们只需十步完成搭建！</p><h2 id="第一步，打开cmd命令行全局安装Hexo-cli脚手架"><a href="#第一步，打开cmd命令行全局安装Hexo-cli脚手架" class="headerlink" title="第一步，打开cmd命令行全局安装Hexo-cli脚手架"></a>第一步，打开cmd命令行全局安装Hexo-cli脚手架</h2><p>使用 win+R 输入cmd 进入命令行界面，输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/2.png" class="" title="运行结果"><h2 id="第二步，在你喜欢的磁盘目录下创建一个空文件夹"><a href="#第二步，在你喜欢的磁盘目录下创建一个空文件夹" class="headerlink" title="第二步，在你喜欢的磁盘目录下创建一个空文件夹"></a>第二步，在你喜欢的磁盘目录下创建一个空文件夹</h2><p>我这里创建了一个winksu的空文件夹，进行第三步之前，一定要确保它是空的。</p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/3.png" class="" title="仅供参考"><h2 id="第三步，在上一步的文件夹下右键打开gitbush命令行界面，进行初始化"><a href="#第三步，在上一步的文件夹下右键打开gitbush命令行界面，进行初始化" class="headerlink" title="第三步，在上一步的文件夹下右键打开gitbush命令行界面，进行初始化"></a>第三步，在上一步的文件夹下右键打开gitbush命令行界面，进行初始化</h2><p>如果右键没有装载gitbush，可以在当前目录通过 shift+右键，打开终端，同样如下进行初始化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/4.png" class="" title="初始化成功"><h2 id="第四步，启动查看Hexo网站是否初始化成功"><a href="#第四步，启动查看Hexo网站是否初始化成功" class="headerlink" title="第四步，启动查看Hexo网站是否初始化成功"></a>第四步，启动查看Hexo网站是否初始化成功</h2><p>输入以下命令启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/5.png" class="" title="运行结果"><p>在浏览器上输入给定的端口号<a href="http://localhost:4000/%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E8%83%BD%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E7%95%8C%E9%9D%A2%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%88%9D%E5%A7%8B%E5%8C%96%E6%88%90%E5%8A%9F%E3%80%82">http://localhost:4000/进行访问能看到如下界面，就是初始化成功。</a></p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/6.png" class="" title="初始化成功"><h2 id="第五步，进入自己的github，创建一个新的仓库，仓库名要与用户名同名，后缀-github-io"><a href="#第五步，进入自己的github，创建一个新的仓库，仓库名要与用户名同名，后缀-github-io" class="headerlink" title="第五步，进入自己的github，创建一个新的仓库，仓库名要与用户名同名，后缀~github.io"></a>第五步，进入自己的github，创建一个新的仓库，仓库名要与用户名同名，后缀~github.io</h2><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/7.png" class="" title="new一个仓库"><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/8.png" class="" title="创建仓库"><h2 id="第六步，打开cmd，验证自己的git账户，目的为了后续生成ssh密钥"><a href="#第六步，打开cmd，验证自己的git账户，目的为了后续生成ssh密钥" class="headerlink" title="第六步，打开cmd，验证自己的git账户，目的为了后续生成ssh密钥"></a>第六步，打开cmd，验证自己的git账户，目的为了后续生成ssh密钥</h2><p>依次输入命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"git用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"git邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/9.png" class="" title="验证账号"><h2 id="第七步，打开gitbush窗口，输入以下命令，获取ssh"><a href="#第七步，打开gitbush窗口，输入以下命令，获取ssh" class="headerlink" title="第七步，打开gitbush窗口，输入以下命令，获取ssh"></a>第七步，打开gitbush窗口，输入以下命令，获取ssh</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> git邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/10.png" class="" title="获取ssh"><h2 id="第八步，打开c盘找到如图所示目录下的-ssh的文件，打开-id-rsa-pub-复制里面的全部内容"><a href="#第八步，打开c盘找到如图所示目录下的-ssh的文件，打开-id-rsa-pub-复制里面的全部内容" class="headerlink" title="第八步，打开c盘找到如图所示目录下的 .ssh的文件，打开 id_rsa.pub,复制里面的全部内容"></a>第八步，打开c盘找到如图所示目录下的 .ssh的文件，打开 id_rsa.pub,复制里面的全部内容</h2><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/11.png" class="" title="找到ssh"><p>打开 .ssh文件，找到id_rsa.pub，复制里面的全部内容</p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/12.png" class="" title="复制ssh"><h2 id="第九步，将生成的ssh添加到github，可以ssh免密登录"><a href="#第九步，将生成的ssh添加到github，可以ssh免密登录" class="headerlink" title="第九步，将生成的ssh添加到github，可以ssh免密登录"></a>第九步，将生成的ssh添加到github，可以ssh免密登录</h2><p>进入github，点击头像，找到右边的settings，进去找到左边SSH and GPG keys，然后new一个SSH key：</p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/13.png" class="" title="new一个key"><p>将上一步复制到 id_rsa.pub 里的密钥粘贴到这里</p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/14.png" class="" title="粘贴ssh key"><h2 id="第九步，打开开始创建的文件夹，打开里面的-config-yml文件，修改最下面的repo为自己的地址"><a href="#第九步，打开开始创建的文件夹，打开里面的-config-yml文件，修改最下面的repo为自己的地址" class="headerlink" title="第九步，打开开始创建的文件夹，打开里面的_config.yml文件，修改最下面的repo为自己的地址"></a>第九步，打开开始创建的文件夹，打开里面的_config.yml文件，修改最下面的repo为自己的地址</h2><p>deploy:<br>type: git<br>repo: <a href="mailto:git@github.com">git@github.com</a>:username/username.github.io.git<br>branch: main<br><strong>注意：冒号后面是有一个空格的，少了会导致下一步出错！</strong></p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/15.png" class="" title="修改配置"><h2 id="第十步，打开gitbush，安装deploy-git目的为了使用命令部署到github"><a href="#第十步，打开gitbush，安装deploy-git目的为了使用命令部署到github" class="headerlink" title="第十步，打开gitbush，安装deploy-git目的为了使用命令部署到github"></a>第十步，打开gitbush，安装deploy-git目的为了使用命令部署到github</h2><p>在命令行运行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/16.png" class="" title="安装插件"><p>然后依次输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo c   <span class="token comment">#清除缓存文件 db.json 和已生成的静态文件 public</span>hexo g       <span class="token comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span>hexo d       <span class="token comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后一个命令会让输入yes，然后刷新github，发现以下文件上传成功，就OK了</p><img src="/2023/08/21/hexo-tong-guo-hexo-da-jian-ge-ren-bo-ke/17.png" class="" title="刷新github"><p>至此，以后你就可以使用XXX.github.io来访问你的个人博客了，还可以给自己的个人博客修改nice的主题。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/08/21/test/"/>
      <url>/2023/08/21/test/</url>
      
        <content type="html"><![CDATA[<h1 id="你好，这是一个测试页面！"><a href="#你好，这是一个测试页面！" class="headerlink" title="你好，这是一个测试页面！"></a>你好，这是一个测试页面！</h1><h1 id="你好，这是一个测试页面！-1"><a href="#你好，这是一个测试页面！-1" class="headerlink" title="你好，这是一个测试页面！"></a>你好，这是一个测试页面！</h1><h1 id="你好，这是一个测试页面！-2"><a href="#你好，这是一个测试页面！-2" class="headerlink" title="你好，这是一个测试页面！"></a>你好，这是一个测试页面！</h1><h1 id="你好，这是一个测试页面！-3"><a href="#你好，这是一个测试页面！-3" class="headerlink" title="你好，这是一个测试页面！"></a>你好，这是一个测试页面！</h1><h1 id="你好，这是一个测试页面！-4"><a href="#你好，这是一个测试页面！-4" class="headerlink" title="你好，这是一个测试页面！"></a>你好，这是一个测试页面！</h1><h1 id="你好，这是一个测试页面！-5"><a href="#你好，这是一个测试页面！-5" class="headerlink" title="你好，这是一个测试页面！"></a>你好，这是一个测试页面！</h1><img src="/2023/08/21/test/1.jpg" class="" title="this is test">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/19/hello-world/"/>
      <url>/2023/08/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
